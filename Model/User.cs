/*==============================================================================================================================
| Author        Jeremy Caney (Jeremy.Caney@Ignia.com)
| Client        Ignia
| Project       Workbench
>===============================================================================================================================
| Revisions     Date        Author              Comments
|- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|               29.04.15    Jeremy Caney        Created initial version.
\=============================================================================================================================*/

using System.Security.Claims;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System;
using System.Runtime.Serialization;

namespace Ignia.Workbench.Models {
  // You can add profile data for the user by adding more properties to your ApplicationUser class, please visit http://go.microsoft.com/fwlink/?LinkID=317594 to learn more.

  /*============================================================================================================================
  | CLASS: USER (IDENTITY)
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   The User class represents the user who authored an object (such as a Post or a Comment) or that is currently
  ///   authenticated.
  /// </summary>
  [DataContract] 
  public class User : IdentityUser {

    /*==========================================================================================================================
    | CONSTRUCTOR
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Initializes a new instance of the User class.
    /// </summary>
    public User() : base() {
      DateCreated = DateTime.Now;
      Followers = new UserCollection();
      Following = new UserCollection();
      LikedComments = new CommentCollection();
      LikedPosts = new PostCollection();
    }

    /*==========================================================================================================================
    | PROPERTY: IDENTIFIER (PRIMARY KEY)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets the identifier of the user.  This property is autogenerated by the database and does not need to be set manually.
    /// </summary>
    /// <value>
    ///   The identifier.
    /// </value>
    [DataMember]
    [Column("UserId")]
    public override string Id {
      get {
        return base.Id;
      }
      set {
        base.Id = value;
      }
    }

    /*==========================================================================================================================
    | PROPERTY: USERNAME (UNIQUE IDENTIFIER)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets the username, which is a unique key identifying the user.
    /// </summary>
    /// <value>The username.</value>
    [DataMember]
    public override string UserName {
      get {
        return base.UserName;
      }
      set {
        base.UserName = value;
      }
    }

    /*==========================================================================================================================
    | PROPERTY: COMMENTS (RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of comments that the user has made.
    /// </summary>
    /// <value>
    ///   The comments the user has submitted.
    /// </value>
    [DataMember]
    [InverseProperty("User")]
    public virtual CommentCollection Comments { get; set; }

    /*==========================================================================================================================
    | PROPERTY: POSTS (RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of posts that the user has made.
    /// </summary>
    /// <value>
    ///   The posts the user has submitted.
    /// </value>
    [DataMember]
    [InverseProperty("User")]
    public virtual PostCollection Posts { get; set; }

    /*==========================================================================================================================
    | PROPERTY: TAGGED IN POSTS (N:N RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of posts that the user is tagged in.
    /// </summary>
    /// <value>
    ///   Posts the user is tagged in.
    /// </value>
    [DataMember]
    [InverseProperty("TaggedUsers")]
    [Display(Name = "Tagged In Posts")]
    public virtual PostCollection TaggedInPosts { get; set; }

    /*==========================================================================================================================
    | PROPERTY: FOLLOWING (N:N RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of users that the user is following.
    /// </summary>
    /// <value>
    ///   The users that the user is following.
    /// </value>
    [DataMember]
    [InverseProperty("Following")]
    public virtual UserCollection Followers { get; set; }

    /*==========================================================================================================================
    | PROPERTY: FOLLOWERS (N:N RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of users that are following the user.
    /// </summary>
    /// <value>
    ///   The users that are following the user.
    /// </value>
    [DataMember]
    [InverseProperty("Followers")]
    public virtual UserCollection Following { get; set; }

    /*==========================================================================================================================
    | PROPERTY: LIKED COMMENTS (N:N RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of comments that the user has liked.
    /// </summary>
    /// <value>
    ///   The comments that the user has liked.
    /// </value>
    [DataMember]
    [InverseProperty("Likes")]
    [Display(Name = "Liked Comments")]
    public virtual CommentCollection LikedComments { get; set; }

    /*==========================================================================================================================
    | PROPERTY: LIKED POSTS (N:N RELATIONSHIP)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets a collection of posts that the user has liked.
    /// </summary>
    /// <value>
    ///   The posts that the user has liked.
    /// </value>
    [DataMember]
    [InverseProperty("Likes")]
    [Display(Name = "Liked Posts")]
    public virtual PostCollection LikedPosts { get; set; }

    /*==========================================================================================================================
    | PROPERTY: DATE CREATED
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets the Date/Time when the user was created.
    /// </summary>
    /// <value>
    ///   The date the user was created.
    /// </value>
    [DataMember]
    [Required]
    [Display(Name = "Date Created")]
    public DateTime DateCreated { get; set; }

    /*==========================================================================================================================
    | PROPERTY: TIMESTAMP
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Gets or sets the time stamp, which is a byte array representing the time when the object was last updated.  ADO.NET
    ///   Entity Framework uses the time stamp field to provide concurrency checking during updates.  In typical use, this is not
    ///   expected to be used by developers - and, in fact, will rarely be used by the system on account of editing objects being
    ///   an unexpected use case.
    /// </summary>
    /// <value>
    ///   The time stamp.
    /// </value>
    [IgnoreDataMember]
    [Timestamp]
    public Byte[] TimeStamp { get; set; }

    /*==========================================================================================================================
    | METHOD: GENERATE USER IDENTITY ASYNCHRONOUSLY (FACTORY)
    \-------------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    ///   Factory method for asynchronously creating a new user identity based on the current user. 
    /// </summary>
    /// <param name="manager">The user manager.</param>
    /// <param name="authenticationType">Authentication method to use.</param>
    /// <returns></returns>
    public async Task<ClaimsIdentity> GenerateUserIdentityAsync(UserManager<User> manager, string authenticationType) {

      // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType
      var userIdentity = await manager.CreateIdentityAsync(this, authenticationType);

      // Add custom user claims here
      return userIdentity;

    }

  }

}