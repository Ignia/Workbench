using System.Security.Claims;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System;

namespace Ignia.Workbench.Models {
  // You can add profile data for the user by adding more properties to your ApplicationUser class, please visit http://go.microsoft.com/fwlink/?LinkID=317594 to learn more.

  /// <summary>
  ///   The User class represents the user who authored an object (such as a Post or a Comment) or that is currently
  ///   authenticated.
  /// </summary>
  public class User : IdentityUser {

    /// <summary>
    ///   Initializes a new instance of the User class.
    /// </summary>
    public User() : base() {
      DateCreated = DateTime.Now;
      Followers = new UserCollection();
      Following = new UserCollection();
      LikedComments = new CommentCollection();
      LikedPosts = new PostCollection();
    }

    /// <summary>
    ///   Gets or sets the identifier of the user.  This property is autogenerated by the database and does not need to be set manually.
    /// </summary>
    /// <value>
    ///   The identifier.
    /// </value>
    [Column("UserId")]
    public override string Id {
      get {
        return base.Id;
      }
      set {
        base.Id = value;
      }
    }

    /// <summary>
    ///   Gets or sets a collection of comments that the user has made.
    /// </summary>
    /// <value>
    ///   The comments the user has submitted.
    /// </value>
    public virtual CommentCollection Comments { get; set; }

    /// <summary>
    ///   Gets or sets a collection of posts that the user has made.
    /// </summary>
    /// <value>
    ///   The posts the user has submitted.
    /// </value>
    public virtual PostCollection Posts { get; set; }

    /// <summary>
    ///   Gets or sets a collection of posts that the user is tagged in.
    /// </summary>
    /// <value>
    ///   Posts the user is tagged in.
    /// </value>
    public virtual PostCollection TaggedInPosts { get; set; }

    /// <summary>
    ///   Gets or sets a collection of users that the user is following.
    /// </summary>
    /// <value>
    ///   The users that the user is following.
    /// </value>
    public virtual UserCollection Followers { get; set; }

    /// <summary>
    ///   Gets or sets a collection of users that are following the user.
    /// </summary>
    /// <value>
    ///   The users that are following the user.
    /// </value>
    public virtual UserCollection Following { get; set; }

    /// <summary>
    ///   Gets or sets a collection of comments that the user has liked.
    /// </summary>
    /// <value>
    ///   The comments that the user has liked.
    /// </value>
    public virtual CommentCollection LikedComments { get; set; }

    /// <summary>
    ///   Gets or sets a collection of posts that the user has liked.
    /// </summary>
    /// <value>
    ///   The posts that the user has liked.
    /// </value>
    public virtual PostCollection LikedPosts { get; set; }

    /// <summary>
    ///   Gets or sets the Date/Time when the user was created.
    /// </summary>
    /// <value>
    ///   The date the user was created.
    /// </value>
    [Required]
    public virtual DateTime DateCreated { get; set; }

    /// <summary>
    ///   Gets or sets the time stamp, which is a byte array representing the time when the object was last updated.  ADO.NET
    ///   Entity Framework uses the time stamp field to provide concurrency checking during updates.  In typical use, this is not
    ///   expected to be used by developers - and, in fact, will rarely be used by the system on account of editing objects being
    ///   an unexpected use case.
    /// </summary>
    /// <value>
    ///   The time stamp.
    /// </value>
    [Timestamp]
    public Byte[] TimeStamp { get; set; }

    /// <summary>
    ///   Factory method for asynchronously creating a new user identity based on the current user. 
    /// </summary>
    /// <param name="manager">The user manager.</param>
    /// <param name="authenticationType">Authentication method to use.</param>
    /// <returns></returns>
    public async Task<ClaimsIdentity> GenerateUserIdentityAsync(UserManager<User> manager, string authenticationType) {
  
      // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType
      var userIdentity = await manager.CreateIdentityAsync(this, authenticationType);
      
      // Add custom user claims here
      return userIdentity;

    }

  }

}