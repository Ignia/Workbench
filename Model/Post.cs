using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ignia.Workbench.Models {

  /// <summary>
  ///     
  /// </summary>
  public class Post {

    /// <summary>
    ///   Initializes a new instance of the Post class.
    /// </summary>
    public Post() {
      DateCreated = DateTime.Now;
    }

    /// <summary>
    ///   Gets or sets the unique identifier of the post.  This property is autogenerated by the database and does not need to be set manually.
    /// </summary>
    /// <value>
    ///   The identifier.
    /// </value>
    [Column("PostID")]
    public int Id { get; set; }

    /// <summary>
    ///   Gets or sets the title for the post.  The maximum length is 75 characters.
    /// </summary>
    /// <value>
    ///   The title of the post.
    /// </value>
    [MaxLength(75)]
    public string Title { get; set; }

    /// <summary>
    ///   Gets or sets the body for the post.  All post types can have bodies, although they are optional.  Bodies may optionally include hashtags.  The maximum length is 500 characters.
    /// </summary>
    /// <value>
    ///   The body of the post.
    /// </value>
    [MaxLength(500)]
    public string Body { get; set; }

    /// <summary>
    ///   Gets or sets a comma-delimited list of keywords associated with the post.
    /// </summary>
    /// <value>
    ///   The keywords associated with the post.
    /// </value>
    public string Keywords { get; set; }

    /// <summary>
    ///   Gets or sets the identifier of the user that created this post.  Corresponds to the User property.
    /// </summary>
    /// <value>
    ///   The identifier of the user.
    /// </value>
    [ForeignKey("User")]
    [Required]
    public string UserId { get; set; }

    /// <summary>
    ///   Gets or sets the user that created this post.  Includes general metadata about the user, such as their display name, as well as access to other objects that the user has created or liked.
    /// </summary>
    /// <value>
    ///   The user.
    /// </value>
    [Required]
    [ForeignKey("UserId")]
    public User User { get; set; }

    /// <summary>
    ///   Gets or sets the Date/Time that the Post was created.
    /// </summary>
    /// <value>
    ///   The date created.
    /// </value>
    [Required]
    public DateTime DateCreated { get; set; }

    /// <summary>
    ///   Gets or sets a collection of users that liked this post.
    /// </summary>
    /// <value>
    ///   The users who liked this post.
    /// </value>
    public virtual UserCollection Likes { get; set; }

    /// <summary>
    ///   Gets or sets a collection of comments associated with this post.
    /// </summary>
    /// <value>
    ///   The comments associated with this post.
    /// </value>
    public virtual CommentCollection Comments { get; set; }

    /// <summary>
    ///   Gets or sets a collection of users tagged with this post.
    /// </summary>
    /// <value>
    ///   The users tagged in this post.
    /// </value>
    public virtual UserCollection TaggedUsers { get; set; }
    
    /// <summary>
    ///   Gets or sets the time stamp, which is a byte array representing the time when the object was last updated.  ADO.NET
    ///   Entity Framework uses the time stamp field to provide concurrency checking during updates.  In typical use, this is not
    ///   expected to be used by developers - and, in fact, will rarely be used by the system on account of editing objects being
    ///   an unexpected use case.
    /// </summary>
    /// <value>
    ///   The time stamp.
    /// </value>
    [Timestamp]
    public Byte[] TimeStamp { get; set; }

  }
}
